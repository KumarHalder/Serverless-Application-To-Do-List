org: khalder
app: serverless-todo-app-app
service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
#  - serverless-offline
#  - serverless-dynamodb-local
#  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TODO_TABLE: Todo2-${self:provider.stage}
    #IMAGES_TABLE: Images-todo-${self:provider.stage}
    #IMAGE_ID_INDEX: ImageIdIndex

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
      #  - dynamodb.UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
    #- Effect: Allow
    #  Action:
    #    - dynamodb:PutItem
    #    - dynamodb:Query
    #  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
    #- Effect: Allow
    #  Action:
    #    - dynamodb:Query
    #  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}


functions:

  #Auth:
  #  handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true

  # TODO: Configure this function
  #GenerateUploadUrl:
  #  handler: src/lambda/http/generateUploadUrl.handler
  #  events:
  #    - http:
  #        method: post
  #        path: todos/{todoId}/attachment
  #        cors: true

resources:
  Resources:
    ToDosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          

        KeySchema:
          - AttributeName: id
            KeyType: HASH 
          
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODO_TABLE}